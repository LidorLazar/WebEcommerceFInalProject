import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import {  SendReview, GetReview,GetAllReview, CheckProdReview} from './ReviewAPI';
import { RootState } from '../app/store';
import Review from '../model/review';





export interface ProductState {
  status: 'idle' | 'loading' | 'failed';
  review: Review[]
  numReview:number
  rating:number
  prodReview: number[]
}
const initialState: ProductState = {
  status: 'idle',
  review: [],
  numReview: 0,
  rating:0,
  prodReview:[],


};

export const SendReviewAsync = createAsyncThunk(
  'review/SendReview',
  async (detalis:any) => {
    const response = await SendReview(detalis);
    return response;
  }
);


export const GetRivewAsync = createAsyncThunk(
  'review/GetRivew',
  async (id:number) => {
    const response = await GetReview(id);
    return response.data;
  }
);


export const GetAllReviewAsync = createAsyncThunk(
  'review/GetAllReview',
  async () => {
    const response = await GetAllReview();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);


export const CheckProdReviewwAsync = createAsyncThunk(
  'review/CheckProdReview',
  async () => {
    const response = await CheckProdReview();
    return response.data;
  }
);



export const ReviewSlice = createSlice({
  name: 'review',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addToCart: (state) => {
     
    }
  },

  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(GetAllReviewAsync.fulfilled, (state, action) => {
    state.review = action.payload
 
  }).addCase(GetRivewAsync.fulfilled, (state, action) => {
    state.review = action.payload
    state.numReview = state.review.length
    let sum = 0
    for (let index = 0; index < state.review.length; index++) {
      sum +=  state.review[index].rating ;
      state.rating =  Math.round(sum / state.review.length)
      
    }
  }).addCase(SendReviewAsync.fulfilled, (state, action) => {
    

}).addCase(CheckProdReviewwAsync.fulfilled, (state, actions)=>{
  state.prodReview = actions.payload
})


}});

export const {  } = ReviewSlice.actions;
export const selectReview = (state: RootState) => state.review.review;
export const selectMumReview = (state: RootState) => state.review.numReview;
export const selectRating = (state: RootState) => state.review.rating;
export const selectProdReview = (state: RootState) => state.review.prodReview;







export default ReviewSlice.reducer;

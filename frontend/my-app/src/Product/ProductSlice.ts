import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import {  GetAllProduct, GetOneProduct, GetAllProductInCategoryOne } from './ProductAPI';
import { RootState } from '../app/store';
import Product from '../model/product';



export interface ProductState {
  status: 'idle' | 'loading' | 'failed';
  products: Product[],
  one_product: Product[],
  cat : Product[]


}
const initialState: ProductState = {
  status: 'idle',
  products: [],
  one_product: [],
  cat: []
};

export const GetAllProducttAsync = createAsyncThunk(
  'product/GetAllProduct',
  async () => {
    const response = await GetAllProduct();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const GetOneProductAsync = createAsyncThunk(
  'product/GetOneProduct',
  async (id:number) => {
    const response = await GetOneProduct(id);
    return response.data;
  }
);


export const GetAllProductInCategoryOneAsync = createAsyncThunk(
  'product/GetAllProductInCategoryOne',
  async (id:number) => {
    const response = await GetAllProductInCategoryOne(id);
    return response.data;
  }
);

export const ProductSlice = createSlice({
  name: 'product',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addToCart: (state) => {
     
    }
  },

  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(GetAllProducttAsync.fulfilled, (state, action) => {
      state.products = action.payload

  }).addCase(GetOneProductAsync.fulfilled, (state, action) => {
    state.one_product = state.products.filter(prod => prod.id  === action.payload)  
  }).addCase(GetAllProductInCategoryOneAsync.fulfilled, (state, action) => {
  state.products = action.payload

},)
}});

export const { addToCart } = ProductSlice.actions;
export const selectProduct = (state: RootState) => state.product.products;
export const selectOneProduct = (state: RootState) => state.product.one_product;
export const selectProductCategory = (state: RootState) => state.product.products;




export default ProductSlice.reducer;
